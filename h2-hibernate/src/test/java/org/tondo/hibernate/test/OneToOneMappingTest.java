package org.tondo.hibernate.test;

import static org.junit.Assert.*;

import java.math.BigDecimal;

import javax.persistence.EntityManager;

import org.junit.Test;
import org.tondo.hibernate.mappings.OneToOneFirst;
import org.tondo.hibernate.mappings.OneToOneSecond;

//Hibernate: create table OneToOneFirst (id bigint generated by default as identity, firstProp varchar(255), primary key (id))
//Hibernate: create table OneToOneSecond (id bigint generated by default as identity, secondProp decimal(19,2), first_id bigint, primary key (id))
//Hibernate: alter table OneToOneSecond add constraint FKh8fy7csvqihrw3a08ts6pdfoo foreign key (first_id) references OneToOneFirst
public class OneToOneMappingTest extends HibernateTestBase {
	
	@Test
	public void testMissingSecond() {
		OneToOneFirst objA = new OneToOneFirst();
		objA.setFirstProp("Ahoj");
		
		assertNull(objA.getId());
		
		manager.getTransaction().begin();
		manager.persist(objA);
		manager.getTransaction().commit();
		
		assertNotNull(objA.getId());
		assertNull(objA.getSecond());
		
		OneToOneFirst foundFromDb = manager.find(OneToOneFirst.class, objA.getId());
		// object returned from internal identity map?
		assertSame(objA, foundFromDb);
	}
	
	@Test
	public void testMissingOwner() {
		OneToOneSecond objB = new OneToOneSecond();
		objB.setSecondProp(BigDecimal.TEN);
		
		manager.getTransaction().begin();
		manager.persist(objB);
		manager.getTransaction().commit();
		
		assertNotNull(objB.getId());
		assertNull(objB.getFirst());
	}
	
	@Test
	public void testSaveOneToOne() {
		OneToOneSecond objB = new OneToOneSecond();
		objB.setSecondProp(BigDecimal.TEN);
		OneToOneFirst objA = new OneToOneFirst();
		objA.setFirstProp("Ahoj");
		objB.setFirst(objA);
		
		manager.getTransaction().begin();
		manager.persist(objA);
		// must be persisted both objects before commit
		manager.persist(objB);
		Long objAId = objA.getId();
		manager.getTransaction().commit();
		// because we didn't assign it
		assertNull("Object B is not known for A", objA.getSecond());
		
		OneToOneFirst fromSameManager = manager.find(OneToOneFirst.class, objAId);
		// object retrieved from cached identity map and doesn't fill relationship
		assertSame("Object is pulled from cache", objA, fromSameManager);
		assertNull("Still not filled", fromSameManager.getSecond());
		
		EntityManager otherManager = factory.createEntityManager();
		OneToOneFirst xxx = otherManager.find(OneToOneFirst.class, objAId);
		assertNotSame("Different manager has different identity cache with different instances", otherManager, objA);
		assertNotNull("Hibernate provided related object", xxx.getSecond());
		// !! From DB comes value 10.00 which is in different scale !!
		assertNotEquals("Big decimal values are in different scale", BigDecimal.TEN, xxx.getSecond().getSecondProp());
		// numeric comparison
		assertTrue(BigDecimal.TEN.compareTo(xxx.getSecond().getSecondProp()) == 0);
		
		otherManager.close();
		
	}
}
